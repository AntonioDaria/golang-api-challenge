// Code generated by MockGen. DO NOT EDIT.
// Source: action_service.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	models "github.com/AntonioDaria/surfe/src/models"
	gomock "github.com/golang/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// GetActionCountByUserID mocks base method.
func (m *MockService) GetActionCountByUserID(userID int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActionCountByUserID", userID)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActionCountByUserID indicates an expected call of GetActionCountByUserID.
func (mr *MockServiceMockRecorder) GetActionCountByUserID(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActionCountByUserID", reflect.TypeOf((*MockService)(nil).GetActionCountByUserID), userID)
}

// GetNextActionProbabilities mocks base method.
func (m *MockService) GetNextActionProbabilities(actionType models.ActionType) map[models.ActionType]float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNextActionProbabilities", actionType)
	ret0, _ := ret[0].(map[models.ActionType]float64)
	return ret0
}

// GetNextActionProbabilities indicates an expected call of GetNextActionProbabilities.
func (mr *MockServiceMockRecorder) GetNextActionProbabilities(actionType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNextActionProbabilities", reflect.TypeOf((*MockService)(nil).GetNextActionProbabilities), actionType)
}
