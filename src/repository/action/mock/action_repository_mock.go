// Code generated by MockGen. DO NOT EDIT.
// Source: action_repository.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	models "github.com/AntonioDaria/surfe/src/models"
	gomock "github.com/golang/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// CountActionsByUserID mocks base method.
func (m *MockRepository) CountActionsByUserID(userID int) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountActionsByUserID", userID)
	ret0, _ := ret[0].(int)
	return ret0
}

// CountActionsByUserID indicates an expected call of CountActionsByUserID.
func (mr *MockRepositoryMockRecorder) CountActionsByUserID(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountActionsByUserID", reflect.TypeOf((*MockRepository)(nil).CountActionsByUserID), userID)
}

// GetAllActions mocks base method.
func (m *MockRepository) GetAllActions() []models.Action {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllActions")
	ret0, _ := ret[0].([]models.Action)
	return ret0
}

// GetAllActions indicates an expected call of GetAllActions.
func (mr *MockRepositoryMockRecorder) GetAllActions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllActions", reflect.TypeOf((*MockRepository)(nil).GetAllActions))
}

// GetSortedActions mocks base method.
func (m *MockRepository) GetSortedActions() []models.Action {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSortedActions")
	ret0, _ := ret[0].([]models.Action)
	return ret0
}

// GetSortedActions indicates an expected call of GetSortedActions.
func (mr *MockRepositoryMockRecorder) GetSortedActions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSortedActions", reflect.TypeOf((*MockRepository)(nil).GetSortedActions))
}

// UserExists mocks base method.
func (m *MockRepository) UserExists(userID int) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserExists", userID)
	ret0, _ := ret[0].(bool)
	return ret0
}

// UserExists indicates an expected call of UserExists.
func (mr *MockRepositoryMockRecorder) UserExists(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserExists", reflect.TypeOf((*MockRepository)(nil).UserExists), userID)
}
